(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{426:function(v,_,t){"use strict";t.r(_);var s=t(2),r=Object(s.a)({},(function(){var v=this,_=v._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("img",{attrs:{src:v.$withBase("/R-C.png"),alt:"R-C",width:"600px",height:"300px",align:"center"}}),v._v(" "),_("h3",{attrs:{id:"使用http不断轮询"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#使用http不断轮询"}},[v._v("#")]),v._v(" 使用HTTP不断轮询")]),v._v(" "),_("p",[v._v("问题："),_("strong",[v._v("怎么样才能在用户不做任何操作的情况下，网页能收到消息并发生变更。")])]),v._v(" "),_("p",[v._v("最常见的解决方案是，"),_("strong",[v._v("网页的前端代码里不断定时发HTTP请求到服务器，服务器收到请求后给客户端响应消息。")])]),v._v(" "),_("p",[v._v("这其实时一种"),_("strong",[v._v("伪")]),v._v("服务器推的形式。")]),v._v(" "),_("p",[v._v("它其实并不是服务器主动发消息到客户端，而是客户端自己不断偷偷请求服务器，只是用户无感知而已。")]),v._v(" "),_("p",[v._v("用这种方式的场景也有很多，最常见的就是"),_("strong",[v._v("扫码登录")]),v._v("。")]),v._v(" "),_("p",[v._v("比如某信公众号平台，登录页面二维码出现之后，"),_("strong",[v._v("前端")]),v._v("网页根本不知道用户扫没扫，于是不断去向"),_("strong",[v._v("后端")]),v._v("服务器询问，看有没有人扫过这个码。而且是以大概1到2秒的间隔去不断发出请求，这样可以保证用户在扫码后能在1到2s内得到及时的反馈，不至于"),_("strong",[v._v("等太久")]),v._v("。")]),v._v(" "),_("p",[v._v("但这样，会有两个比较明显的问题")]),v._v(" "),_("ul",[_("li",[v._v("当你打开F12页面时，你会发现满屏的HTTP请求。虽然很小，但这其实也消耗带宽，同时也会增加下游服务器的负担。")]),v._v(" "),_("li",[v._v("最坏情况下，用户在扫码后，需要等个1~2s，正好才触发下一次http请求，然后才跳转页面，用户会感到"),_("strong",[v._v("明显的卡顿")]),v._v("。")])]),v._v(" "),_("p",[v._v("使用起来的体验就是，二维码出现后，手机扫一扫，然后在手机上点个确认，这时候"),_("strong",[v._v("卡顿等个1~2s")]),v._v("，页面才跳转。")]),v._v(" "),_("p",[v._v("那么问题又来了，"),_("strong",[v._v("有没有更好的解决方案？")])]),v._v(" "),_("p",[v._v("有，而且实现起来成本还非常低。")]),v._v(" "),_("h3",{attrs:{id:"长轮询"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#长轮询"}},[v._v("#")]),v._v(" 长轮询")]),v._v(" "),_("p",[v._v("我们知道，HTTP请求发出后，一般会给服务器留一定的时间做响应，比如3s，规定时间内没返回，就认为是超时。")]),v._v(" "),_("p",[v._v("如果我们的HTTP请求"),_("strong",[v._v("将超时设置的很大")]),v._v("，比如30s，"),_("strong",[v._v("在这30s内只要服务器收到了扫码请求，就立马返回给客户端网页。如果超时，那就立马发起下一次请求。")])]),v._v(" "),_("p",[v._v("这样就减少了HTTP请求的个数，并且由于大部分情况下，用户都会在某个30s的区间内做扫码操作，所以响应也是及时的。")]),v._v(" "),_("p",[v._v("比如，某度云网盘就是这么干的。所以你会发现一扫码，手机上点个确认，电脑端网页就"),_("strong",[v._v("秒跳转")]),v._v("，体验很好。")]),v._v(" "),_("p",[v._v("像这种发起一个请求，在较长时间内等待服务器响应的机制，就是所谓的"),_("strong",[v._v("长训轮机制")]),v._v("。我们常用的消息队列RocketMQ中，消费者去取数据时，也用到了这种方式。")]),v._v(" "),_("p",[v._v("上面提到的两种解决方案，本质上，其实还是客户端主动去取数据。")]),v._v(" "),_("p",[v._v("对于像扫码登录这样的"),_("strong",[v._v("简单场景")]),v._v("还能用用。")]),v._v(" "),_("p",[v._v("但如果是网页游戏呢，游戏一般会有大量的数据需要从服务器主动推送到客户端。")]),v._v(" "),_("p",[v._v("这就得说下"),_("strong",[v._v("websocket")]),v._v("了。")]),v._v(" "),_("h3",{attrs:{id:"websocket是什么"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#websocket是什么"}},[v._v("#")]),v._v(" websocket是什么")]),v._v(" "),_("p",[v._v("我们知道TCP连接的两端，"),_("strong",[v._v("同一时间里")]),v._v("，"),_("strong",[v._v("双方")]),v._v("都可以"),_("strong",[v._v("主动")]),v._v("向对方发送数据。这就是所谓的"),_("strong",[v._v("全双工")]),v._v("。")]),v._v(" "),_("p",[v._v("而现在使用最广泛的"),_("code",[v._v("HTTP1.1")]),v._v("，也是基于TCP协议的，"),_("strong",[v._v("同一时间里")]),v._v("，客户端和服务器"),_("strong",[v._v("只能有一方主动")]),v._v("发数据，这就是所谓的"),_("strong",[v._v("半双工")]),v._v("。")]),v._v(" "),_("p",[v._v("也就是说，好好的全双工TCP，被HTTP用成了半双工。")]),v._v(" "),_("p",[v._v("为什么？")]),v._v(" "),_("p",[v._v("这是由于HTTP协议设计之初，考虑的是看看网页文本的场景，能做到"),_("strong",[v._v("客户端发起请求再由服务器响应")]),v._v("，就够了，根本就没考虑网页游戏这种，客户端和服务器之间都要互相主动发大量数据的场景。")]),v._v(" "),_("p",[v._v("所以为了更好的支持这样的场景，我们需要另外一个"),_("strong",[v._v("基于TCP的新协议")]),v._v("。")]),v._v(" "),_("p",[v._v("于是新的应用层协议"),_("strong",[v._v("websocket")]),v._v("就被设计出来了。")]),v._v(" "),_("p",[v._v("大家别被这个名字给带偏了。虽然名字带了个socket，但其实socket和websocket之间，就跟雷峰和雷峰塔一样，二者接近"),_("strong",[v._v("毫无关系")]),v._v("。")]),v._v(" "),_("h3",{attrs:{id:"怎么建立websocket连接"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#怎么建立websocket连接"}},[v._v("#")]),v._v(" 怎么建立websocket连接")]),v._v(" "),_("p",[v._v("我们平时刷网页，一般都是在浏览器上刷的，一会刷刷图文，这时候用的是"),_("strong",[v._v("HTTP协议")]),v._v("，一会打开网页游戏，这时候就得切换成我们新介绍的"),_("strong",[v._v("websocket协议")]),v._v("。")]),v._v(" "),_("p",[v._v("为了兼容这些使用场景。浏览器在"),_("strong",[v._v("TCP三次握手")]),v._v("建立连接之后，都"),_("strong",[v._v("统一使用HTTP协议")]),v._v("先进行一次通信。")]),v._v(" "),_("ul",[_("li",[v._v("如果此时是"),_("strong",[v._v("普通的HTTP请求")]),v._v("，那后续双方就还是老样子继续用普通HTTP协议进行交互，这点没啥疑问。")]),v._v(" "),_("li",[v._v("如果这时候是"),_("strong",[v._v("想建立websocket连接")]),v._v("，就会在HTTP请求里带上一些"),_("strong",[v._v("特殊的header头")]),v._v("。")])]),v._v(" "),_("h3",{attrs:{id:"总结"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[v._v("#")]),v._v(" 总结")]),v._v(" "),_("ul",[_("li",[v._v("TCP协议本身是"),_("strong",[v._v("全双工")]),v._v("的，但我们最常用的HTTP1.1，虽然是基于TCP的协议，但它是"),_("strong",[v._v("半双工")]),v._v("的，对于大部分需要服务器主动推送数据到客户端的场景，都不太友好，因此我们需要使用支持全双工的websocket协议。")]),v._v(" "),_("li",[v._v("在HTTP1.1里。只要客户端不问，服务端就不答。基于这样的特点，对于登录页面这样的简单场景，可以使用"),_("strong",[v._v("定时轮询或者长轮询")]),v._v("的方式实现"),_("strong",[v._v("服务器推送")]),v._v("(comet)的效果。")]),v._v(" "),_("li",[v._v("对于客户端和服务端之间需要频繁交互的复杂场景，比如网页游戏，都可以考虑使用websocket协议。")]),v._v(" "),_("li",[v._v("websocket和socket几乎没有任何关系，只是叫法相似。")]),v._v(" "),_("li",[v._v("正因为各个浏览器都支持HTTP协议，所以websocket会先利用HTTP协议加上一些特殊的header头进行握手升级操作，升级成功后就跟HTTP没有任何关系了，之后就用websocket的数据格式进行收发数据。")])])])}),[],!1,null,null,null);_.default=r.exports}}]);