(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{414:function(v,_,r){"use strict";r.r(_);var a=r(2),e=Object(a.a)({},(function(){var v=this,_=v._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("h1",{attrs:{id:"垃圾收集"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#垃圾收集"}},[v._v("#")]),v._v(" 垃圾收集")]),v._v(" "),_("p",[v._v("JDK1.7堆内存划分图(1.8永久代被元空间替换)")]),v._v(" "),_("img",{attrs:{src:"https://billrepo.oss-cn-hangzhou.aliyuncs.com/doc-img/image-20220919104157469.png"}}),v._v(" "),_("h2",{attrs:{id:"minor-gc和full-gc"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#minor-gc和full-gc"}},[v._v("#")]),v._v(" Minor GC和Full GC")]),v._v(" "),_("p",[v._v("新生代GC(Minor GC)：指发生在新生代的垃圾收集动作，因为Java对象大多都具备朝生夕灭的特性，所以Minor GC非常频繁，一般回收速度也比较快。"),_("strong",[v._v("当Eden区没有足够的空间进行分配时，虚拟机将发起一次Minor GC。")])]),v._v(" "),_("p",[v._v("老年代GC(Major GC/Full GC)：指发生在老年代的垃圾收集动作，出现了Major GC，经常会伴有至少一次的Minor GC。Major GC的速度一般会比Minor GC的慢10倍以上。"),_("strong",[v._v("当老年代空间不够用的时候，虚拟机会使用 “标记—清除”或者 “标记—整理” 算法清理出连续的内存空间，分配对象使用。")])]),v._v(" "),_("h2",{attrs:{id:"垃圾收集算法"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#垃圾收集算法"}},[v._v("#")]),v._v(" 垃圾收集算法")]),v._v(" "),_("h3",{attrs:{id:"标记-清除-算法"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#标记-清除-算法"}},[v._v("#")]),v._v(" “标记—清除”算法")]),v._v(" "),_("p",[v._v("算法分为标记和清除两个阶段：首先标记出所有需要回收的对象，在标记完成后统一回收所有被标记的对象。")]),v._v(" "),_("p",[v._v("缺点：")]),v._v(" "),_("ol",[_("li",[v._v("效率问题。标记和清除的效率都不高；")]),v._v(" "),_("li",[v._v("标记清除后会产生"),_("strong",[v._v("大量不连续的内存碎片")]),v._v("，空间碎片太多可能会导致当以后在程序运行过程中需要分配较大对象时无法找到足够的连续内存而不得不提前触发另一次垃圾收集动作。")])]),v._v(" "),_("h3",{attrs:{id:"复制算法"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#复制算法"}},[v._v("#")]),v._v(" 复制算法")]),v._v(" "),_("p",[v._v("它将可用内存按容量划分为大小相等的两块，每次只使用其中的一块。当这一块的内存用完了，就将还存活着的对象全部复制到另外一块上面，之后清除正在使用的内存块中的所有对象，交换两个内存的角色，最后完成垃圾回收。")]),v._v(" "),_("p",[v._v("研究表明98%的对象是朝生夕死的，所以不需要按照1:1的比例划分内存空间。HotSpot虚拟机将内存分为一块较大的Eden空间和两块较小的Survivor空间，默认比例为"),_("strong",[v._v("8：1：1")]),v._v("，每次使用Eden和其中的一块Survivor。")]),v._v(" "),_("p",[v._v("GC开始时，对象只会存在于Eden区和From Survivor区，To Survivor区是空的（作为保留区域）。GC进行时，Eden区中所有存活的对象都会被复制到To Survivor区，而在From Survivor区中，仍存活的对象会根据它们的年龄值决定去向，年龄值达到年龄阀值（默认为15，新生代中的对象每熬过一轮垃圾回收，年龄值就加1，GC分代年龄存储在对象的header中）的对象会被移到老年代中，没有达到阀值的对象会被复制到To Survivor区。接着清空Eden区和From Survivor区，新生代中存活的对象都在To Survivor区。接着， From Survivor区和To Survivor区会"),_("strong",[v._v("交换")]),v._v("它们的角色，也就是新的To Survivor区就是上次GC清空的From Survivor区，新的From Survivor区就是上次GC的To Survivor区，总之，不管怎样都会保证To Survivor区在一轮GC后是空的。GC时当To Survivor区没有足够的空间存放上一次新生代收集下来的存活对象时，需要依赖老年代进行"),_("strong",[v._v("分配担保")]),v._v("，将这些对象存放在老年代中。")]),v._v(" "),_("p",[v._v("优点")]),v._v(" "),_("ol",[_("li",[v._v("没有标记和清除，实现简单，运行高效。")]),v._v(" "),_("li",[v._v("不会产生内存碎片。")])]),v._v(" "),_("p",[v._v("缺点")]),v._v(" "),_("ol",[_("li",[v._v("它浪费了一半(10%)的内存。")]),v._v(" "),_("li",[v._v("在对象"),_("strong",[v._v("存活率较高")]),v._v("时要进行较多的复制操作，效率会降低。当空间不够放全部存活对象时需要有额外的空间进行分配担保，老年代一般不直接采用这种算法。")])]),v._v(" "),_("h3",{attrs:{id:"标记-整理-算法"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#标记-整理-算法"}},[v._v("#")]),v._v(" “标记—整理”算法")]),v._v(" "),_("p",[v._v("根据老年代特点，有人提出了标记—整理算法，标记过程和“标记—清除”算法一样，但后续步骤不是直接对可回收对象进行清理，而是让所有存活的对象都向一端移动，然后直接清理掉端边界以外的内存。")]),v._v(" "),_("p",[v._v("优点：不会产生内存碎片。")]),v._v(" "),_("h3",{attrs:{id:"分代收集算法"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#分代收集算法"}},[v._v("#")]),v._v(" 分代收集算法")]),v._v(" "),_("p",[v._v("新生代：每次GC时有大批对象死去，只有少量存活，那就选用复制算法，只需付出少量存活对象的复制成本就可完成收集。")]),v._v(" "),_("p",[v._v("老年代：对象存活率高、没有额外空间对它进行分配担保，就必须使用“标记—清除”算法或“标记—整理”算法。")]),v._v(" "),_("h2",{attrs:{id:"垃圾收集器"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#垃圾收集器"}},[v._v("#")]),v._v(" 垃圾收集器")]),v._v(" "),_("p",[v._v("第一阶段：单线程收集时代（Serial和Serial Old）")]),v._v(" "),_("p",[v._v("第二阶段：多线程收集时代（Parallel Scanvenge 和Parallel Old）")]),v._v(" "),_("p",[v._v("第三阶段：并发收集时代（ParNew和CMS）")]),v._v(" "),_("p",[v._v("第四阶段：智能并发收集时代（G1）")]),v._v(" "),_("p",[v._v("**新生代收集器：**Serial、ParNew、Parallel Scavenge；")]),v._v(" "),_("p",[v._v("**老年代收集器：**Serial Old、Parallel Old、CMS；")]),v._v(" "),_("p",[_("strong",[v._v("通用收集器：")]),v._v(" G1；")]),v._v(" "),_("p",[v._v("**常用组合：**串行收集器组合Serial+Serial Old， 并行收集器组合Parallel Scavenge+Parallel Old，并发标记清除收集器组合ParNew+CMS，G1（不需要组合其他收集器）。")]),v._v(" "),_("img",{attrs:{src:"https://billrepo.oss-cn-hangzhou.aliyuncs.com/doc-img/image-20220919155101004.png"}}),v._v(" "),_("h3",{attrs:{id:"serial收集器"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#serial收集器"}},[v._v("#")]),v._v(" Serial收集器")]),v._v(" "),_("p",[v._v("Serial是一个单线程收集器，它是HotSpot中Client模式下的默认新生代垃圾收集器。它在进行垃圾收集时，必须暂停其他所有的用户工作线程**(Stop the Word)**，直到它收集结束。")]),v._v(" "),_("p",[v._v("收集区域：新生代")]),v._v(" "),_("p",[v._v("收集方式：单线程")]),v._v(" "),_("p",[v._v("使用算法：复制算法")]),v._v(" "),_("p",[v._v("优点： 简单高效、没有线程交互的开销、单核CPU环境最佳选项。")]),v._v(" "),_("p",[v._v("缺点：GC过程需要暂停所有用户正常工作的线程；"),_("strong",[v._v("无法发挥出多核CPU的优势")]),v._v("。")]),v._v(" "),_("h3",{attrs:{id:"parnew收集器"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#parnew收集器"}},[v._v("#")]),v._v(" ParNew收集器")]),v._v(" "),_("p",[v._v("ParNew收集器其实就是Serial收集器的"),_("strong",[v._v("多线程版本")]),v._v("。ParNew收集器除了多线程收集之外，与Serial收集器相比并没有太多创新之处，但它却是许多运行在Server模式下的虚拟机中首选的新生代收集器，其中一个与性能无关但很重要的原因是，除了Serial收集器之外，只有它能"),_("strong",[v._v("与CMS收集器配合工作")]),v._v("。")]),v._v(" "),_("p",[v._v("收集区域：新生代")]),v._v(" "),_("p",[v._v("收集方式：多线程")]),v._v(" "),_("p",[v._v("使用算法：复制算法")]),v._v(" "),_("p",[v._v("优点：Serial的多线程版本(多条垃圾收集线程"),_("strong",[v._v("并行")]),v._v("工作，但用户线程仍处于等待状态)，适用于多核cpu系统；可以与CMS收集器配合工作。")]),v._v(" "),_("p",[v._v("缺点：同Serial，GC过程需要暂停所有用户正常工作的线程。")]),v._v(" "),_("h3",{attrs:{id:"parallel-scavenge收集器"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#parallel-scavenge收集器"}},[v._v("#")]),v._v(" Parallel Scavenge收集器")]),v._v(" "),_("p",[v._v("Scavenge [ˈskævɪndʒ]  打扫")]),v._v(" "),_("p",[v._v("由于与吞吐量关系密切，Parallel Scavenge收集器也成为**“吞吐量优先”收集器**。")]),v._v(" "),_("p",[v._v("与ParNew一样，在收集过程中会开启多个线程一起收集，整个过程都会暂停用户线程，直到整个垃圾收集过程结束。")]),v._v(" "),_("p",[v._v("Parallel Scavenge的特别之处是，它的关注点与其他收集器不同，CMS等收集器的关注点是尽可能"),_("strong",[v._v("缩短垃圾收集时用户线程的停顿时间")]),v._v("，而Parallel Scavenge的目标则是"),_("strong",[v._v("达到一个可控制的吞吐量")]),v._v("(Throughput)。吞吐量=运行用户代码时间/(运行用户代码时间+垃圾收集时间)。")]),v._v(" "),_("p",[v._v("手工优化存在困难时，Parallel Scavenge收集器配合"),_("strong",[v._v("自适应调节策略")]),v._v("，把调优任务交给虚拟机。自适应调节策略也是Parallel Scavenge收集器与ParNew收集器的重要区别。")]),v._v(" "),_("p",[v._v("收集区域：新生代")]),v._v(" "),_("p",[v._v("收集方式：多线程")]),v._v(" "),_("p",[v._v("使用算法：复制算法")]),v._v(" "),_("p",[v._v("优点：达到一个可控制的吞吐量；多线程收集器(多条垃圾收集线程"),_("strong",[v._v("并行")]),v._v("工作，但用户线程仍处于等待状态)，适用于多核cpu系统；")]),v._v(" "),_("p",[v._v("缺点：GC过程需要暂停所有用户正常工作的线程。")]),v._v(" "),_("h3",{attrs:{id:"serial-old收集器"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#serial-old收集器"}},[v._v("#")]),v._v(" Serial Old收集器")]),v._v(" "),_("p",[v._v("Serial Old是Serial收集器的老年代版本，它同样也是"),_("strong",[v._v("单线程")]),v._v("收集器，它是Client模式下的默认老年代垃圾收集器。CMS的后备预案。")]),v._v(" "),_("p",[v._v("GC时会暂停所有用户线程。")]),v._v(" "),_("p",[v._v("收集区域：老年代")]),v._v(" "),_("p",[v._v("收集方式：单线程")]),v._v(" "),_("p",[v._v("使用算法：标记—整理算法")]),v._v(" "),_("h3",{attrs:{id:"parallel-old收集器"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#parallel-old收集器"}},[v._v("#")]),v._v(" Parallel Old收集器")]),v._v(" "),_("p",[v._v("Parallel Old是Parallel Scavenge收集器的老年代版本，使用"),_("strong",[v._v("多线程")]),v._v("和“标记—整理算法”。")]),v._v(" "),_("p",[v._v("GC时会暂停所有用户线程。")]),v._v(" "),_("p",[v._v("收集区域：老年代")]),v._v(" "),_("p",[v._v("收集方式：多线程")]),v._v(" "),_("p",[v._v("使用算法：标记—整理算法")]),v._v(" "),_("p",[v._v("搭配收集器：Parallel Scavenge")]),v._v(" "),_("p",[v._v("优点：在"),_("strong",[v._v("注重吞吐量和CPU资源敏感")]),v._v("的场合，都可以优先考虑Parallel Scavenge+Parallel Old "),_("strong",[v._v("“吞吐量优先”收集器的组合")]),v._v("。")]),v._v(" "),_("h3",{attrs:{id:"cms收集器"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#cms收集器"}},[v._v("#")]),v._v(" CMS收集器")]),v._v(" "),_("p",[v._v("CMS(Concurrent Mark Sweep)：并发标记清除 。CMS 收集器是一种以获取最短回收停顿时间为目标的收集器。")]),v._v(" "),_("p",[v._v("它非常符合在注重用户体验的应用上使用，它是HotSpot虚拟机第一款真正意义上的并发收集器("),_("strong",[v._v("这里的并发强调的是：用户线程与GC线程可以同时执行")]),v._v(")，它第一次实现了让垃圾收集线程与用户线程（基本上）同时工作 。从名字（ Mark Sweep ）上也可以看出 CMS收集器是基于 “标记—清除”算法实现的垃圾收集器。")]),v._v(" "),_("p",[v._v("运作过程分为4步：")]),v._v(" "),_("ol",[_("li",[v._v("初始标记 (Stop the Word)")]),v._v(" "),_("li",[v._v("并发标记 （用户线程和GC线程并行工作）")]),v._v(" "),_("li",[v._v("重新标记 (Stop the Word)")]),v._v(" "),_("li",[v._v("并发清理（用户线程和GC线程并行工作）")])]),v._v(" "),_("p",[v._v("初始标记仅仅标记被GC Roots直接关联的对象，所以速度很快。")]),v._v(" "),_("p",[v._v("并发标记是进行GC Roots Tracing的过程，为了避免GC时间过长，这个阶段CMS 让用户线程和 GC线程同时工作，尽量减少用户线程的停顿。 GC线程这个时候就要从GC Roots的直接关联对象开始"),_("strong",[v._v("遍历整个对象图")]),v._v("，这个"),_("strong",[v._v("耗时最长")]),v._v("， 所以CMS重点优化了这块 。")]),v._v(" "),_("p",[v._v("重新标记阶段"),_("strong",[v._v("修正")]),v._v("并发标记期间因为用户程序继续运行而导致标记产生变动的那一部分对象的标记记录。 所以这个时候要"),_("strong",[v._v("Stop the Word")]),v._v("，不然还是会出现阶段二的情况。")]),v._v(" "),_("p",[v._v("由于整个过程中耗时最长的并发标记和并发清理过程用户线程和GC线程一起工作，所以总体来说，CMS收集器的内存回收过程是与用户线程一起并发执行的。")]),v._v(" "),_("p",[v._v("收集区域：老年代")]),v._v(" "),_("p",[v._v("收集方式：多线程")]),v._v(" "),_("p",[v._v("使用算法：标记—清除算法")]),v._v(" "),_("p",[v._v("搭配收集器：ParNew")]),v._v(" "),_("p",[v._v("优点：并发收集、低停顿。")]),v._v(" "),_("p",[v._v("缺点：")]),v._v(" "),_("ol",[_("li",[v._v("并发阶段，用户线程和GC线程有可能争抢CPU资源，因为GC线程占用一部分CPU资源而导致应用程序变慢。")]),v._v(" "),_("li",[v._v("无法处理"),_("strong",[v._v("浮动垃圾")]),v._v(" , 在并发标记和并发清理阶段又产生垃圾，这种浮动垃圾只能等到下一次gc再清理了。")]),v._v(" "),_("li",[v._v("“标记—清除”算法会导致收集结束时会有大量空间碎片产生。解决方案，执行多次不压缩的full gc后，来一次带压缩的full gc。")])]),v._v(" "),_("p",[v._v("-XX:+UseCMSCompactAtFullCollection(默认开启)：Full GC之后做压缩整理，其目的是为了减少内存碎片")]),v._v(" "),_("h5",{attrs:{id:"concurrent-mode-failure"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#concurrent-mode-failure"}},[v._v("#")]),v._v(" Concurrent Mode Failure")]),v._v(" "),_("p",[v._v("在 并发标记 和 并发清除阶段 是 用户线程和GC线程并行执行， 如果这个时候 用户线程又产生了一些大对象或者符合条件的对象晋升到了老年代， 这个时候老年代没有空间存放这些对象了，GC一边回收，系统一边运行，也许没回收完就"),_("strong",[v._v("再次触发full gc")]),v._v(" , 就出现了 “"),_("strong",[v._v("concurrent mode failure")]),v._v("” 。这时，虚拟机启动"),_("strong",[v._v("后备预案")]),v._v("，临时启用"),_("strong",[v._v("Serial Old收集器")]),v._v("来重新进行老年代垃圾收集，这样停顿时间就很长了，所以参数-XX:CMSInitiatingOccupancyFraction设置的太高容易出现多次“Concurrent Mode Failure”，性能反而降低。")]),v._v(" "),_("p",[_("code",[v._v("-XX:CMSInitiatingOccupancyFraction")]),v._v(": 当老年代使用达到该比例时会触发FullGC（默认是92%）")]),v._v(" "),_("h3",{attrs:{id:"g1收集器"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#g1收集器"}},[v._v("#")]),v._v(" G1收集器")]),v._v(" "),_("p",[v._v("不管是Serial系列、Parallel系列、CMS系列，它们都是基于把内存进行物理分区的形式把JVM内存分成老年代、新生代、永久代或MetaSpace，这种分区模式下进行垃圾收集时必须对某个区域进行整体性的收集（比如整个新生代、整个老年代收集或者整个堆）， 原来的内存空间都不是很大，一般就是几G到几十G，但现在的硬件资源发展可用的内存达到几百G甚至上T的程度，那么JVM中的某一个分代区域就可能会有几十上百G的大小，那么如果这时候采用传统模式下的物理分区的收集的话，"),_("strong",[v._v("每次垃圾扫描内存区域变大了")]),v._v("，那么需要的清理时间自然就会变得更长了。")]),v._v(" "),_("p",[v._v("G1首先吸取了CMS优良的思路，还是使用并发收集的模式，但是更重要的是G1摒弃了原来的物理分区，而是把整个内存分成若干个大小的Region区域，然后由不同的Region在逻辑上来组合成各个分代，这样做的好处是G1进行垃圾回收的时候就可以用Region作为单位来进行更细粒度的回收了，每次回收可以只针对某一个或多个Region来进行回收。")]),v._v(" "),_("p",[_("strong",[v._v("可预测的停顿")])]),v._v(" "),_("p",[v._v("G1可以建立可预测的停顿时间模型，是因为它可以有机会的避免GC时的全堆扫描。G1对各个Region的垃圾的价值(回收所获空间以及回收所需时间)进行排序，维护一个优先列表，"),_("strong",[v._v("根据用户期望的GC停顿时间来制定回收计划")]),v._v("。每次根据允许的收集时间，优先回收价值最大的Region。")]),v._v(" "),_("p",[v._v("这种"),_("strong",[v._v("使用Region划分内存空间")]),v._v("以及"),_("strong",[v._v("有优先级的区域回收方式")]),v._v("，保证了G1在有限时间里获取尽可能高的回收效率。")]),v._v(" "),_("p",[_("strong",[v._v("Region（内存分区）")])]),v._v(" "),_("p",[v._v("G1最核心的分区基本单位Region ，G1没有像之前一样把堆内存划分为固定连续的几块区域，而是完全舍弃了进行内存上的物理分区，而是把堆内存拆分成了大小为1M-32M的Region块，然后以Region为单位自由的组合成新生代、老年代、Eden区、survior区、大对象区（Humonggous Region），随着垃圾回收和对象分配每个Region也不会一直固定属于哪个分代，我们可以认为Region可以随时扮演任何一个分代区域的内存。")]),v._v(" "),_("p",[v._v("在每个Region分区内部又被分成了若干个大小为512 Byte"),_("strong",[v._v("卡片(Card)")]),v._v("，分配的对象会占用物理上连续的若干个卡片，当查找分区内对象的引用时便可通过记录卡片来查找该引用对象(见RSet)。每次对内存的回收，都是对指定分区的卡片进行处理。")]),v._v(" "),_("p",[_("strong",[v._v("Remembered Set (已记忆集合 RSet)")])]),v._v(" "),_("p",[v._v("G1使用Remembered Set来避免全堆扫描。G1中每个Region都有一个与之对应的Remembered Set，存放Region之间的对象引用。")]),v._v(" "),_("p",[_("strong",[v._v("G1运作过程")]),v._v("分为4步：")]),v._v(" "),_("ol",[_("li",[v._v("初始标记 (Stop the Word)：仅标记被GC Roots直接关联的对象")]),v._v(" "),_("li",[v._v("并发标记 （用户线程和GC线程并行工作）：从GC Roots的直接关联对象开始"),_("strong",[v._v("遍历整个对象图")])]),v._v(" "),_("li",[v._v("最终标记 (Stop the Word)："),_("strong",[v._v("修正")]),v._v("并发标记期间因为用户程序继续运行而导致标记产生变动的那一部分对象的标记记录，虚拟机将这段时间对象标记的变化记录在Remembered Set Logs里，并把Remembered Set Logs的数据合并到Remembered Set中。")]),v._v(" "),_("li",[v._v("筛选回收（用户线程和GC线程并行工作）：对各个Region的价值(回收所获空间以及回收所需时间)进行排序，根据用户期望的GC停顿时间来制定回收计划。")])]),v._v(" "),_("p",[v._v("G1的回收流程和CMS逻辑大致相同，分别进行初始标记、并发标记、重新标记、筛选清除，区别在最后一个阶段G1不会直接进行清除，而是会根据设置的停顿时间进行智能的筛选和局部的回收。")]),v._v(" "),_("p",[v._v("收集区域： 整个堆内存")]),v._v(" "),_("p",[v._v("使用算法： 整体来看基于标记—整理算法，从Region来看基于复制算法")]),v._v(" "),_("p",[v._v("收集方式： 多线程")]),v._v(" "),_("p",[v._v("搭配收集器： 无需其他收集器搭配")]),v._v(" "),_("p",[v._v("优点：")]),v._v(" "),_("ol",[_("li",[_("strong",[v._v("停顿时间可控")]),v._v("，吞吐量高，可根据具体场景选择吞吐量有限还是停顿时间有限，不需要额外的收集器搭配。")]),v._v(" "),_("li",[v._v("G1 跟踪各个 Region 里面的垃圾堆积的价值大小（回收所获得的空间大小以及回收所需时间的经验值），在后台维护一个优先列表，每次根据允许的收集时间，优先回收价值最大的Region。保证了 G1 收集器"),_("strong",[v._v("在有限的时间内可以获取尽可能高的收集效率")]),v._v("。")])]),v._v(" "),_("p",[v._v("缺点： 因为需要维护的额外信息比较多，所以"),_("strong",[v._v("需要的内存空间大")]),v._v("，6G以上的内存才能考虑使用G1收集器。")]),v._v(" "),_("h2",{attrs:{id:"停顿时间与吞吐量"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#停顿时间与吞吐量"}},[v._v("#")]),v._v(" 停顿时间与吞吐量")]),v._v(" "),_("p",[v._v("停顿时间越短就越适合与用户交互的程序，良好的响应速度能提升用户体验，而提高吞吐量可以高效率的使用CPU时间，尽快完成程序的运算任务，主要适合在后台运算而不需要太多的交互任务。")]),v._v(" "),_("h2",{attrs:{id:"内存分配与回收"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#内存分配与回收"}},[v._v("#")]),v._v(" 内存分配与回收")]),v._v(" "),_("p",[_("strong",[v._v("新生代、老年代、永久代")])]),v._v(" "),_("ol",[_("li",[v._v("新生代（Young Generation）")])]),v._v(" "),_("p",[v._v("新生成的对象优先存放在新生代中，新生代对象朝生夕死，存活率很低，在新生代中，常规应用进行一次垃圾收集一般可以回收70% ~ 95% 的空间，回收效率很高。\n　　HotSpot将新生代划分为三块，一块较大的Eden（伊甸）空间和两块较小的Survivor（幸存者）空间，默认比例为8：1：1。划分的目的是因为HotSpot采用复制算法来回收新生代，设置这个比例是为了充分利用内存空间，减少浪费。新生成的对象在Eden区分配（大对象除外，大对象直接进入老年代），当Eden区没有足够的空间进行分配时，虚拟机将发起一次Minor GC。\nGC开始时，对象只会存在于Eden区和From Survivor区，To Survivor区是空的（作为保留区域）。GC进行时，Eden区中所有存活的对象都会被复制到To Survivor区，而在From Survivor区中，仍存活的对象会根据它们的年龄值决定去向，年龄值达到年龄阀值（默认为15，新生代中的对象每熬过一轮垃圾回收，年龄值就加1，GC分代年龄存储在对象的header中）的对象会被移到老年代中，没有达到阀值的对象会被复制到To Survivor区。接着清空Eden区和From Survivor区，新生代中存活的对象都在To Survivor区。接着， From Survivor区和To Survivor区会交换它们的角色，也就是新的To Survivor区就是上次GC清空的From Survivor区，新的From Survivor区就是上次GC的To Survivor区，总之，不管怎样都会保证To Survivor区在一轮GC后是空的。GC时当To Survivor区没有足够的空间存放上一次新生代收集下来的存活对象时，需要依赖老年代进行分配担保，将这些对象存放在老年代中。")]),v._v(" "),_("ol",{attrs:{start:"2"}},[_("li",[v._v("老年代（Old Generationn）")])]),v._v(" "),_("p",[v._v("在新生代中经历了多次（具体看虚拟机配置的阀值）GC后仍然存活下来的对象会进入老年代中。老年代中的对象生命周期较长，存活率比较高，在老年代中进行GC的频率相对而言较低，而且回收的速度也比较慢。")]),v._v(" "),_("ol",{attrs:{start:"3"}},[_("li",[v._v("永久代（Permanent Generationn）")])]),v._v(" "),_("p",[v._v("永久代存储类信息、常量、静态变量、即时编译器编译后的代码等数据，对这一区域而言，Java虚拟机规范指出可以不进行垃圾收集，一般而言不会进行垃圾回收。")])])}),[],!1,null,null,null);_.default=e.exports}}]);